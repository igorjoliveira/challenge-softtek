// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Softtek.Data.Context;

#nullable disable

namespace Softtek.Data.Migrations
{
    [DbContext(typeof(SofttekDbContext))]
    [Migration("20250520014652_CriarContextoAssistenciaEmocional")]
    partial class CriarContextoAssistenciaEmocional
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.5");

            modelBuilder.Entity("Softtek.Domain.Aggregates.AssistenciaEmocional.ApoioBase", b =>
                {
                    b.Property<string>("Codigo")
                        .HasMaxLength(26)
                        .HasColumnType("TEXT");

                    b.Property<string>("ApoioAggregateId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DataCriacao")
                        .HasColumnType("TEXT");

                    b.Property<string>("Descricao")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<string>("Titulo")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("TEXT");

                    b.HasKey("Codigo");

                    b.HasIndex("ApoioAggregateId");

                    b.ToTable("Apoios", (string)null);

                    b.UseTptMappingStrategy();
                });

            modelBuilder.Entity("Softtek.Domain.Aggregates.AssistenciaEmocional.AssistenciaAggregate", b =>
                {
                    b.Property<string>("Codigo")
                        .HasMaxLength(26)
                        .HasColumnType("TEXT");

                    b.HasKey("Codigo");

                    b.ToTable("Assistencia", (string)null);
                });

            modelBuilder.Entity("Softtek.Domain.Aggregates.AvaliacaoPsicossocial.AvaliacaoAggregate", b =>
                {
                    b.Property<string>("Codigo")
                        .HasMaxLength(26)
                        .HasColumnType("TEXT");

                    b.Property<DateOnly>("DataCriacao")
                        .HasColumnType("TEXT");

                    b.HasKey("Codigo");

                    b.ToTable("Avaliacoes");
                });

            modelBuilder.Entity("Softtek.Domain.Aggregates.AvaliacaoPsicossocial.BlocoDePergunta", b =>
                {
                    b.Property<string>("Codigo")
                        .HasMaxLength(26)
                        .HasColumnType("TEXT");

                    b.Property<string>("AvaliacaoCodigo")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("Frequencia")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Titulo")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.HasKey("Codigo");

                    b.HasIndex("AvaliacaoCodigo");

                    b.ToTable("BlocosDePergunta");
                });

            modelBuilder.Entity("Softtek.Domain.Aggregates.AvaliacaoPsicossocial.Escala.EscalaBase", b =>
                {
                    b.Property<string>("Codigo")
                        .HasMaxLength(26)
                        .HasColumnType("TEXT");

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("TEXT");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(13)
                        .HasColumnType("TEXT");

                    b.Property<string>("EscalaValorCodigo")
                        .HasColumnType("TEXT");

                    b.HasKey("Codigo");

                    b.HasIndex("EscalaValorCodigo");

                    b.ToTable("Escalas");

                    b.HasDiscriminator().HasValue("EscalaBase");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Softtek.Domain.Aggregates.AvaliacaoPsicossocial.Escala.EscalaBaseValor", b =>
                {
                    b.Property<string>("EscalaBaseCodigo")
                        .HasMaxLength(26)
                        .HasColumnType("TEXT");

                    b.Property<string>("EscalaValorCodigo")
                        .HasMaxLength(26)
                        .HasColumnType("TEXT");

                    b.HasKey("EscalaBaseCodigo", "EscalaValorCodigo");

                    b.HasIndex("EscalaValorCodigo");

                    b.ToTable("EscalaBaseValores");
                });

            modelBuilder.Entity("Softtek.Domain.Aggregates.AvaliacaoPsicossocial.Escala.EscalaValor", b =>
                {
                    b.Property<string>("Codigo")
                        .HasMaxLength(26)
                        .HasColumnType("TEXT");

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.HasKey("Codigo");

                    b.ToTable("EscalaValores");
                });

            modelBuilder.Entity("Softtek.Domain.Aggregates.AvaliacaoPsicossocial.Pergunta", b =>
                {
                    b.Property<string>("Codigo")
                        .HasMaxLength(26)
                        .HasColumnType("TEXT");

                    b.Property<string>("BlocoDePerguntaCodigo")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool?>("Desativado")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("TEXT");

                    b.Property<string>("EscalaCodigo")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Codigo");

                    b.HasIndex("BlocoDePerguntaCodigo");

                    b.HasIndex("EscalaCodigo");

                    b.ToTable("Perguntas");
                });

            modelBuilder.Entity("Softtek.Domain.Aggregates.AssistenciaEmocional.Tipos.Lembrete", b =>
                {
                    b.HasBaseType("Softtek.Domain.Aggregates.AssistenciaEmocional.ApoioBase");

                    b.Property<DateTime>("DataAgendada")
                        .HasColumnType("TEXT");

                    b.ToTable("Lembretes", (string)null);
                });

            modelBuilder.Entity("Softtek.Domain.Aggregates.AssistenciaEmocional.Tipos.Notificacao", b =>
                {
                    b.HasBaseType("Softtek.Domain.Aggregates.AssistenciaEmocional.ApoioBase");

                    b.Property<string>("NivelGravidade")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<bool>("Urgente")
                        .HasColumnType("INTEGER");

                    b.ToTable("Notificacoes", (string)null);
                });

            modelBuilder.Entity("Softtek.Domain.Aggregates.AssistenciaEmocional.Tipos.RecursoDeApoio", b =>
                {
                    b.HasBaseType("Softtek.Domain.Aggregates.AssistenciaEmocional.ApoioBase");

                    b.Property<string>("Categoria")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("Link")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("TEXT");

                    b.Property<int>("Tipo")
                        .HasColumnType("INTEGER");

                    b.ToTable("RecursosDeApoio", (string)null);
                });

            modelBuilder.Entity("Softtek.Domain.Aggregates.AvaliacaoPsicossocial.Escala.Tipos.EmocaoEscala", b =>
                {
                    b.HasBaseType("Softtek.Domain.Aggregates.AvaliacaoPsicossocial.Escala.EscalaBase");

                    b.HasDiscriminator().HasValue("Emocao");
                });

            modelBuilder.Entity("Softtek.Domain.Aggregates.AvaliacaoPsicossocial.Escala.Tipos.FrequenciaEscala", b =>
                {
                    b.HasBaseType("Softtek.Domain.Aggregates.AvaliacaoPsicossocial.Escala.EscalaBase");

                    b.HasDiscriminator().HasValue("Frequencia");
                });

            modelBuilder.Entity("Softtek.Domain.Aggregates.AvaliacaoPsicossocial.Escala.Tipos.IntensidadeEscala", b =>
                {
                    b.HasBaseType("Softtek.Domain.Aggregates.AvaliacaoPsicossocial.Escala.EscalaBase");

                    b.HasDiscriminator().HasValue("Intensidade");
                });

            modelBuilder.Entity("Softtek.Domain.Aggregates.AvaliacaoPsicossocial.Escala.Tipos.PontuacaoEscala", b =>
                {
                    b.HasBaseType("Softtek.Domain.Aggregates.AvaliacaoPsicossocial.Escala.EscalaBase");

                    b.HasDiscriminator().HasValue("Pontuacao");
                });

            modelBuilder.Entity("Softtek.Domain.Aggregates.AvaliacaoPsicossocial.Escala.Tipos.HumorEscala", b =>
                {
                    b.HasBaseType("Softtek.Domain.Aggregates.AvaliacaoPsicossocial.Escala.Tipos.EmocaoEscala");

                    b.HasDiscriminator().HasValue("Humor");
                });

            modelBuilder.Entity("Softtek.Domain.Aggregates.AssistenciaEmocional.ApoioBase", b =>
                {
                    b.HasOne("Softtek.Domain.Aggregates.AssistenciaEmocional.AssistenciaAggregate", "ApoioAggregate")
                        .WithMany("Apoios")
                        .HasForeignKey("ApoioAggregateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApoioAggregate");
                });

            modelBuilder.Entity("Softtek.Domain.Aggregates.AvaliacaoPsicossocial.BlocoDePergunta", b =>
                {
                    b.HasOne("Softtek.Domain.Aggregates.AvaliacaoPsicossocial.AvaliacaoAggregate", "Avaliacao")
                        .WithMany("BlocosDePergunta")
                        .HasForeignKey("AvaliacaoCodigo")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Avaliacao");
                });

            modelBuilder.Entity("Softtek.Domain.Aggregates.AvaliacaoPsicossocial.Escala.EscalaBase", b =>
                {
                    b.HasOne("Softtek.Domain.Aggregates.AvaliacaoPsicossocial.Escala.EscalaValor", null)
                        .WithMany("EscalasAssociadas")
                        .HasForeignKey("EscalaValorCodigo");
                });

            modelBuilder.Entity("Softtek.Domain.Aggregates.AvaliacaoPsicossocial.Escala.EscalaBaseValor", b =>
                {
                    b.HasOne("Softtek.Domain.Aggregates.AvaliacaoPsicossocial.Escala.EscalaBase", "EscalaBase")
                        .WithMany("ValoresAceitos")
                        .HasForeignKey("EscalaBaseCodigo")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Softtek.Domain.Aggregates.AvaliacaoPsicossocial.Escala.EscalaValor", "EscalaValor")
                        .WithMany()
                        .HasForeignKey("EscalaValorCodigo")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EscalaBase");

                    b.Navigation("EscalaValor");
                });

            modelBuilder.Entity("Softtek.Domain.Aggregates.AvaliacaoPsicossocial.Pergunta", b =>
                {
                    b.HasOne("Softtek.Domain.Aggregates.AvaliacaoPsicossocial.BlocoDePergunta", "Bloco")
                        .WithMany("Perguntas")
                        .HasForeignKey("BlocoDePerguntaCodigo")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Softtek.Domain.Aggregates.AvaliacaoPsicossocial.Escala.EscalaBase", "Escala")
                        .WithMany()
                        .HasForeignKey("EscalaCodigo")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Bloco");

                    b.Navigation("Escala");
                });

            modelBuilder.Entity("Softtek.Domain.Aggregates.AssistenciaEmocional.Tipos.Lembrete", b =>
                {
                    b.HasOne("Softtek.Domain.Aggregates.AssistenciaEmocional.ApoioBase", null)
                        .WithOne()
                        .HasForeignKey("Softtek.Domain.Aggregates.AssistenciaEmocional.Tipos.Lembrete", "Codigo")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Softtek.Domain.Aggregates.AssistenciaEmocional.Tipos.Notificacao", b =>
                {
                    b.HasOne("Softtek.Domain.Aggregates.AssistenciaEmocional.ApoioBase", null)
                        .WithOne()
                        .HasForeignKey("Softtek.Domain.Aggregates.AssistenciaEmocional.Tipos.Notificacao", "Codigo")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Softtek.Domain.Aggregates.AssistenciaEmocional.Tipos.RecursoDeApoio", b =>
                {
                    b.HasOne("Softtek.Domain.Aggregates.AssistenciaEmocional.ApoioBase", null)
                        .WithOne()
                        .HasForeignKey("Softtek.Domain.Aggregates.AssistenciaEmocional.Tipos.RecursoDeApoio", "Codigo")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Softtek.Domain.Aggregates.AssistenciaEmocional.AssistenciaAggregate", b =>
                {
                    b.Navigation("Apoios");
                });

            modelBuilder.Entity("Softtek.Domain.Aggregates.AvaliacaoPsicossocial.AvaliacaoAggregate", b =>
                {
                    b.Navigation("BlocosDePergunta");
                });

            modelBuilder.Entity("Softtek.Domain.Aggregates.AvaliacaoPsicossocial.BlocoDePergunta", b =>
                {
                    b.Navigation("Perguntas");
                });

            modelBuilder.Entity("Softtek.Domain.Aggregates.AvaliacaoPsicossocial.Escala.EscalaBase", b =>
                {
                    b.Navigation("ValoresAceitos");
                });

            modelBuilder.Entity("Softtek.Domain.Aggregates.AvaliacaoPsicossocial.Escala.EscalaValor", b =>
                {
                    b.Navigation("EscalasAssociadas");
                });
#pragma warning restore 612, 618
        }
    }
}
